package umlmodeling;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.*;
import javax.swing.JPanel;
import java.awt.geom.*;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

public class frmUML extends javax.swing.JFrame {

    Vector classes = new Vector();
    Vector useCaseObjects = new Vector();
    ArrayList<String> values = new ArrayList<String>();
    int curClass = 0;
    int inh1 = -1, inh2 = -1;       //For Inheritance
    int ass1 = -1, ass2 = -1;       //For Association
    int agg1 = -1, agg2 = -1;       //For Aggregation
    int oass1 = -1, oass2 = -1;     //For usecase association   
    int extd1 = -1, extd2 = -1;     //For usecase extends

    int i1 = 0;  // to update Association no
    int i2 = 0;  // to update Inheritance no
    int i3 = 0;  // to update Aggregation no
    Vector classAssociations = new Vector();      // For Inheritance
    Vector useCaseAssociations = new Vector();    // For Use case Association
    Vector classAssVector = new Vector();       // For Association
    Vector classAggregation = new Vector();     // For Aggregation
    Vector useCaseExtend = new Vector();       // For Use case Extends

    myJPanel pnlCanvas = new myJPanel();
    public Vector lines = new Vector();

    public class UseCaseObject {

        public String objectType = "";
        public Object obj;

        public UseCaseObject(String _objectType, Object _obj) {
            objectType = _objectType;
            obj = _obj;
        }
    }

    public frmUML(String _filename) {
        this.add(pnlCanvas);
        initComponents();
        pnlCanvas.setLayout(null);
        pnlCanvas.setBackground(Color.WHITE);
        pnlCanvas.setVisible(true);
        //   System.out.println(getSize().height);
        pnlCanvas.setBounds(0, 60, 2000, 2000);
        if (!_filename.equals("")) {
            readFile(_filename);
            txtFileName.setText(_filename);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdAddClass = new javax.swing.JButton();
        cmdActor = new javax.swing.JButton();
        cmdUseCase = new javax.swing.JButton();
        cmdInheritance = new javax.swing.JToggleButton();
        cmdAggregation = new javax.swing.JToggleButton();
        cmdAssociation = new javax.swing.JToggleButton();
        cmdExtends = new javax.swing.JToggleButton();
        cmdGenerate = new javax.swing.JButton();
        Association = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        cmbAss = new java.awt.Choice();
        cmdDelAss = new javax.swing.JButton();
        Inheritance = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        cmbInh = new java.awt.Choice();
        cmdDelInh = new javax.swing.JButton();
        Save = new javax.swing.JToolBar();
        jLabel4 = new javax.swing.JLabel();
        txtFileName = new javax.swing.JTextField();
        cmdSave = new javax.swing.JButton();
        Aggregation = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        cmbAgg = new java.awt.Choice();
        cmdDelAgg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jToolBar1.setRollover(true);

        cmdAddClass.setText("New Class");
        cmdAddClass.setFocusable(false);
        cmdAddClass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAddClass.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddClassActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdAddClass);

        cmdActor.setText("New Actor");
        cmdActor.setFocusable(false);
        cmdActor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdActor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActorActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdActor);

        cmdUseCase.setText("New UseCase");
        cmdUseCase.setFocusable(false);
        cmdUseCase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdUseCase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdUseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUseCaseActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdUseCase);

        cmdInheritance.setText("New Inheritance");
        cmdInheritance.setFocusable(false);
        cmdInheritance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdInheritance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdInheritance);

        cmdAggregation.setText("New Aggregation");
        cmdAggregation.setFocusable(false);
        cmdAggregation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAggregation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdAggregation);

        cmdAssociation.setText("New Association");
        cmdAssociation.setFocusable(false);
        cmdAssociation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAssociation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdAssociation);

        cmdExtends.setText("New Extends");
        cmdExtends.setFocusable(false);
        cmdExtends.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdExtends.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdExtends);

        cmdGenerate.setText("Generate Code");
        cmdGenerate.setFocusable(false);
        cmdGenerate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdGenerate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdGenerate);

        getContentPane().add(jToolBar1);
        jToolBar1.setBounds(-10, 0, 760, 23);

        Association.setRollover(true);

        jLabel1.setText("Association :");
        Association.add(jLabel1);
        Association.add(cmbAss);

        cmdDelAss.setText("Delete");
        cmdDelAss.setFocusable(false);
        cmdDelAss.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelAss.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDelAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelAssActionPerformed(evt);
            }
        });
        Association.add(cmdDelAss);

        getContentPane().add(Association);
        Association.setBounds(740, 0, 220, 23);

        Inheritance.setRollover(true);

        jLabel2.setText("Inheritance :");
        Inheritance.add(jLabel2);
        Inheritance.add(cmbInh);

        cmdDelInh.setText("Delete");
        cmdDelInh.setFocusable(false);
        cmdDelInh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelInh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDelInh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelInhActionPerformed(evt);
            }
        });
        Inheritance.add(cmdDelInh);

        getContentPane().add(Inheritance);
        Inheritance.setBounds(950, 0, 210, 23);

        Save.setRollover(true);

        jLabel4.setText("   Save UML File ");
        Save.add(jLabel4);
        Save.add(txtFileName);

        cmdSave.setText("Save");
        cmdSave.setFocusable(false);
        cmdSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        Save.add(cmdSave);

        getContentPane().add(Save);
        Save.setBounds(-10, 30, 330, 30);

        Aggregation.setRollover(true);

        jLabel3.setText("Aggregation :");
        Aggregation.add(jLabel3);
        Aggregation.add(cmbAgg);

        cmdDelAgg.setText("Delete");
        cmdDelAgg.setFocusable(false);
        cmdDelAgg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelAgg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDelAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelAggActionPerformed(evt);
            }
        });
        Aggregation.add(cmdDelAgg);

        getContentPane().add(Aggregation);
        Aggregation.setBounds(1150, 0, 210, 23);

        setSize(new java.awt.Dimension(1185, 518));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
class association {                             // For Inheritance

        public int classID1 = 0, classID2 = 0;
    }

    class association1 {                            // For Association

        public int ass_classID1 = 0, ass_classID2 = 0;
    }

    class aggregation {                             // For Aggregation

        public int agg_classID1 = 0, agg_classID2 = 0;
    }

    class useCaseAssociation {                      // For Use-Case Association

        public int useCaseID1 = 0, useCaseID2 = 0;
    }
    
    class useCaseExtends {                          // For Use-Case Extends
        public int extendsID1 = 0, extendsID2 = 0;
    }

    void associateModelClass(ModelClass m) {
        m.addMouseMotionListener(new MouseMotionListener() {
            public void mouseDragged(MouseEvent e) {
                ModelClass cur = (ModelClass) e.getComponent();
                deactivateAll();
                cur.activate();
                drawAssociations();
                    //pnlCanvas.repaint();
                //drawAssociations();
            }

            public void mouseMoved(MouseEvent e) {

            }
        });

        m.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {

                deactivateAll();
                ModelClass cur = (ModelClass) e.getComponent();
                cur.activate();
                drawAssociations();
                if (cmdInheritance.isSelected()) {
                    if (inh1 == -1) {
                        inh1 = cur.id;
                    } else {
                        inh2 = cur.id;
                        association a = new association();
                        a.classID1 = inh1;
                        a.classID2 = inh2;
                        classAssociations.add(a);
                        cmbInh.add("" + i2);
                        i2++;
                        drawAssociations();
                        cmdInheritance.setSelected(false);
                        inh1 = -1;
                        inh2 = -1;
                    }
                }
                if (cmdAssociation.isSelected()) {
                    if (ass1 == -1) {
                        ass1 = cur.id;
                    } else {
                        ass2 = cur.id;
                        association1 a = new association1();
                        a.ass_classID1 = ass1;
                        a.ass_classID2 = ass2;
                        classAssVector.add(a);
                        cmbAss.add("" + i1);
                        i1++;
                        drawAssociations();
                        cmdAssociation.setSelected(false);
                        ass1 = -1;
                        ass2 = -1;
                    }
                }
                if (cmdAggregation.isSelected()) {
                    if (agg1 == -1) {
                        agg1 = cur.id;
                    } else {
                        agg2 = cur.id;
                        aggregation a = new aggregation();
                        a.agg_classID1 = agg1;
                        a.agg_classID2 = agg2;
                        classAggregation.add(a);
                        cmbAgg.add("" + i3);
                        i3++;
                        drawAssociations();
                        cmdAggregation.setSelected(false);
                        agg1 = -1;
                        agg2 = -1;
                    }
                }

            }

            public void mousePressed(MouseEvent e) {
                //drawAssociations();
            }

            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseEntered(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }

    private void cmdAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddClassActionPerformed
        // TODO add your handling code here:       
        ModelClass m = new ModelClass("<New Class>");
        pnlCanvas.add(m);
        m.setBounds(0, 0, 150, 100);
        m.setVisible(true);
        m.Variables.add("");
        m.Variables.add("");
        m.Variables.add("");
        m.Variables.add("");
        m.Variables.add("");
        m.id = classes.size();
        associateModelClass(m);
        m.initialize();
        classes.add(m);
    }//GEN-LAST:event_cmdAddClassActionPerformed

    private void cmdDelAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelAssActionPerformed
        // TODO add your handling code here:
        if (cmbAss.getSelectedIndex() == -1) {
            return;
        }
        int curAss = Integer.parseInt(cmbAss.getSelectedItem());
        //  classAssociations.removeElementAt(curAss);
        classAssVector.removeElementAt(curAss);
        cmbAss.remove(curAss);
        i1--;
        if (cmbAss.getSelectedIndex() == -1) {
            i1 = 0;
        }
        drawAssociations();
        int itemcount = cmbAss.getItemCount();

        for (int i = 0; i < itemcount; i++) {

            values.add(i, cmbAss.getItem(i));

        }
        cmbAss.removeAll();
        if (itemcount > 0) {
            for (int i = 0; i < curAss; i++) {
                cmbAss.add(values.get(i));
            }
        }

        for (int i = curAss; i < itemcount; i++) {
            cmbAss.add("" + (Integer.parseInt(values.get(i)) - 1));
        }
    }//GEN-LAST:event_cmdDelAssActionPerformed

    void associateActor(Actor a) {
        a.addMouseMotionListener(new MouseMotionListener() {

            public void mouseDragged(MouseEvent e) {
                drawAssociations();
            }

            public void mouseMoved(MouseEvent e) {

            }
        });

        a.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
                Actor act = (Actor) e.getComponent();
                if (cmdAssociation.isSelected()) {
                    if (oass1 == -1) {
                        oass1 = act.id;
                    } else {
                        if (oass1 == act.id) {
                            return;
                        }
                        oass2 = act.id;
                        useCaseAssociation uca = new useCaseAssociation();
                        uca.useCaseID1 = oass1;
                        uca.useCaseID2 = oass2;
                        useCaseAssociations.add(uca);
                        cmdAssociation.setSelected(false);
                        oass1 = -1;
                        oass2 = -1;
                        drawAssociations();

                    }
                }
                if(cmdExtends.isSelected())
                {
                    if(extd1 == -1) {
                        extd1 = act.id;
                    } else {
                        if(extd1 == act.id) {
                            return;
                        }
                        extd2 = act.id;
                        useCaseExtends uce = new useCaseExtends();
                        uce.extendsID1 = extd1;
                        uce.extendsID2 = extd2;
                        useCaseExtend.add(uce);
                        extd1 = -1;
                        extd2 = -1;
                        cmdExtends.setSelected(false);                        
                    }
                    drawAssociations();
                }

            }

            public void mousePressed(MouseEvent e) {

            }

            public void mouseReleased(MouseEvent e) {

            }

            public void mouseEntered(MouseEvent e) {

            }

            public void mouseExited(MouseEvent e) {

            }
        });
    }

    void associateUseCase(UseCase u) {
        u.addMouseMotionListener(new MouseMotionListener() {
            public void mouseDragged(MouseEvent e) {
                drawAssociations();
            }

            public void mouseMoved(MouseEvent e) {

            }
        });
        u.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                UseCase uc = (UseCase) e.getComponent();
                if (cmdAssociation.isSelected()) {
                    if (oass1 == -1) {
                        oass1 = uc.id;
                    } else {
                        if (oass1 == uc.id) {
                            return;
                        }
                        oass2 = uc.id;
                        useCaseAssociation uca = new useCaseAssociation();
                        uca.useCaseID1 = oass1;
                        uca.useCaseID2 = oass2;
                        useCaseAssociations.add(uca);
                        oass1 = -1;
                        oass2 = -1;
                        cmdAssociation.setSelected(false);
                    }
                    drawAssociations();
                }
                
                if(cmdExtends.isSelected())
                {
                    if(extd1 == -1) {
                        extd1 = uc.id;
                    } else {
                        if(extd1 == uc.id) {
                            return;
                        }
                        extd2 = uc.id;
                        useCaseExtends uce = new useCaseExtends();
                        uce.extendsID1 = extd1;
                        uce.extendsID2 = extd2;
                        useCaseExtend.add(uce);
                        extd1 = -1;
                        extd2 = -1;
                        cmdExtends.setSelected(false);                        
                    }
                    drawAssociations();
                }
            }

            public void mousePressed(MouseEvent e) {

            }

            public void mouseReleased(MouseEvent e) {

            }

            public void mouseEntered(MouseEvent e) {

            }

            public void mouseExited(MouseEvent e) {

            }
        });
    }

    private void cmdActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActorActionPerformed
        // TODO add your handling code here:
        Actor a = new Actor();
        a.setBounds(0, 0, 63, 146);
        pnlCanvas.add(a);
        drawAssociations();
        a.setVisible(true);
        a.id = useCaseObjects.size();
        associateActor(a);
        UseCaseObject uco = new UseCaseObject("A", a);
        useCaseObjects.add(uco);
    }//GEN-LAST:event_cmdActorActionPerformed

    private void cmdUseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUseCaseActionPerformed
        // TODO add your handling code here:
        UseCase u = new UseCase();
        u.setBounds(0, 0, 276, 72);
        pnlCanvas.add(u);
        drawAssociations();
        u.setVisible(true);
        u.id = useCaseObjects.size();
        associateUseCase(u);
        UseCaseObject uco = new UseCaseObject("U", u);
        useCaseObjects.add(uco);
    }//GEN-LAST:event_cmdUseCaseActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        if (txtFileName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid file name!");
            return;
        }
        File f = new File(txtFileName.getText());
        String path = f.getPath();
        System.out.println("Path of File :" + path);

        path = path.substring(0, path.lastIndexOf("\\"));
        File d = new File(path);
        if (!d.exists()) {
            JOptionPane.showMessageDialog(this, "Path does not exsit!");
            return;
        }
        System.out.println();
        saveFile(txtFileName.getText());

    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateActionPerformed
        // TODO add your handling code here:
        //Generating the code output
        String output = "";
        for (int i = 0; i < classes.size(); i++) {

            ModelClass c = (ModelClass) classes.get(i);
            c.updateVariables();
            String classExtends = "";
            String Association = "";
            String Aggregation = "";
            for (int j = 0; j < classAssociations.size(); j++) {
                association ass = (association) classAssociations.get(j);
                if (c.id == ass.classID1) {
                    for (int k = 0; k < classes.size(); k++) {
                        ModelClass cls = (ModelClass) classes.get(k);
                        if (cls.id == ass.classID2) {
                            classExtends = cls.ClassName;
                            break;
                        }
                    }
                    break;
                }
            }

            for (int p = 0; p < classAggregation.size(); p++) {
                aggregation agg = (aggregation) classAggregation.get(p);
                if (c.id == agg.agg_classID1) {
                    for (int q = 0; q < classes.size(); q++) {
                        ModelClass cls = (ModelClass) classes.get(q);
                        if (cls.id == agg.agg_classID2) {
                            Aggregation = cls.ClassName;
                            break;
                        }
                    }
                    break;
                }

            }

            for (int k = 0; k < classAssVector.size(); k++) {
                association1 ass1 = (association1) classAssVector.get(k);
                if (c.id == ass1.ass_classID1) {
                    for (int l = 0; l < classes.size(); l++) {
                        ModelClass cls = (ModelClass) classes.get(l);
                        if (cls.id == ass1.ass_classID2) {
                            Association = cls.ClassName;
                            break;
                        }
                    }
                    break;
                }
            }

            output += "\n//Class begin " + c.ClassName + "\n";
            if (classExtends.equals("") && Association.equals("") && Aggregation.equals("")) {
                output += "class " + c.ClassName + "{" + "\n"; //begin the class
            } else if (Association != "" && classExtends.equals("") && Aggregation.equals("")) {
                output += "class " + c.ClassName + "{" + "\n" + "private " + Association + " target;" + "\n" + "public void newMethod("
                        + Association + " newTarget) {" + "\n" + "\tthis.target = newTarget;" + "\n" + "}\n";
            } else if (Aggregation != "" && classExtends.equals("") && Association.equals("")) {
                output += "class" + c.ClassName + "{\n" + Aggregation + " target;" + "\n" + "public void newMethod() {\n"
                        + "\ttarget =  new " + Aggregation + "();\n" + "}\n";
            } else {
                output += "class " + c.ClassName + " extends " + classExtends + "{" + "\n"; //begin the class
            }
            for (int j = 0; j < c.Variables.size(); j++) {

                String curVariable = c.Variables.get(j).toString();
                String firstWord = null;
                String lastWord = null;
                String signVar = null;
                if (curVariable.equals("")) {
                    continue;
                }
                if (curVariable.startsWith("+") || curVariable.startsWith("-") || curVariable.startsWith("#")) {
                    if (curVariable.startsWith("+")) {
                        signVar = "public";
                        if (curVariable.indexOf(" ") != -1) {
                            firstWord = curVariable.substring(1, curVariable.indexOf(" "));
                        } else {
                            firstWord = curVariable.substring(1);
                        }
                        output = Write_Var_Methods(curVariable, signVar, firstWord, lastWord, output);
                    } else if (curVariable.startsWith("-")) {
                        signVar = "private";
                        if (curVariable.indexOf(" ") != -1) {
                            firstWord = curVariable.substring(1, curVariable.indexOf(" "));
                        } else {
                            firstWord = curVariable.substring(1);
                        }
                        output = Write_Var_Methods(curVariable, signVar, firstWord, lastWord, output);
                    } else {
                        signVar = "protected";
                        if (curVariable.indexOf(" ") != -1) {
                            firstWord = curVariable.substring(1, curVariable.indexOf(" "));
                        } else {
                            firstWord = curVariable.substring(1);
                        }
                        output = Write_Var_Methods(curVariable, signVar, firstWord, lastWord, output);
                    }
                } else {
                    signVar = "";
                    if (curVariable.indexOf(" ") != -1) {
                        firstWord = curVariable.substring(0, curVariable.indexOf(" "));
                    } else {
                        firstWord = curVariable.substring(0);
                    }
                    output = Write_Var_Methods(curVariable, signVar, firstWord, lastWord, output);
                }
            }
            output += "\n}" + "\n"; //class ending bracket
        }
        frmCode frm = new frmCode(output);
        frm.setVisible(true);
    }//GEN-LAST:event_cmdGenerateActionPerformed

    public String Write_Var_Methods(String curVariable, String signVar, String firstWord, String lastWord, String output) {

        String[] words = curVariable.split(" ");

        lastWord = words[words.length - 1];
               //  System.out.println("" + lastWord);

        if (curVariable.indexOf("(") != -1) {

            if (lastWord.equals(curVariable.charAt(0) + firstWord) || lastWord.equals(firstWord)) {
                lastWord = "void";
            }
            output += getTabs(1) + signVar + " " + lastWord + " " + firstWord + " {" + "\n";
            output += getTabs(2) + "//TODO Define method here" + "\n";
            output += getTabs(1) + "}" + "\n";

        } else {
            if (curVariable.endsWith("string")) {
                output += getTabs(1) + signVar + " String " + firstWord + " = " + "\"\";" + "\n";

            } else if (curVariable.endsWith("int")) {
                output += getTabs(1) + signVar + " int " + firstWord + " = " + "0;" + "\n";

            } else {
                output += getTabs(1) + signVar + " " + lastWord + " " + firstWord + ";" + "\n";

            }
        }

        return output;
    }

    private void cmdDelInhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelInhActionPerformed
        // TODO add your handling code here:
        if (cmbInh.getSelectedIndex() == -1) {
            return;
        }
        int curAss = Integer.parseInt(cmbInh.getSelectedItem());
        classAssociations.removeElementAt(curAss);
        //  classAssVector.removeElementAt(curAss);
        cmbInh.remove(curAss);
        i2--;
        if (cmbInh.getSelectedIndex() == -1) {
            i2 = 0;
        }
        drawAssociations();
        int itemcount = cmbInh.getItemCount();

        for (int i = 0; i < itemcount; i++) {

            values.add(i, cmbInh.getItem(i));

        }
        cmbInh.removeAll();
        if (itemcount > 0) {
            for (int i = 0; i < curAss; i++) {
                cmbInh.add(values.get(i));
            }
        }
        for (int i = curAss; i < itemcount; i++) {
            cmbInh.add("" + (Integer.parseInt(values.get(i)) - 1));
        }
    }//GEN-LAST:event_cmdDelInhActionPerformed

    private void cmdDelAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelAggActionPerformed
        // TODO add your handling code here:
        if (cmbAgg.getSelectedIndex() == -1) {
            return;
        }
        int curAss = Integer.parseInt(cmbAgg.getSelectedItem());
        classAggregation.removeElementAt(curAss);
        //  classAssVector.removeElementAt(curAss);
        cmbAgg.remove(curAss);
        i3--;
        if (cmbAgg.getSelectedIndex() == -1) {
            i3 = 0;
        }
        drawAssociations();
        int itemcount = cmbAgg.getItemCount();

        for (int i = 0; i < itemcount; i++) {

            values.add(i, cmbAgg.getItem(i));

        }
        cmbAgg.removeAll();
        if (itemcount > 0) {
            for (int i = 0; i < curAss; i++) {
                cmbAgg.add(values.get(i));
            }
        }
        for (int i = curAss; i < itemcount; i++) {
            cmbAgg.add("" + (Integer.parseInt(values.get(i)) - 1));
        }
    }//GEN-LAST:event_cmdDelAggActionPerformed

    public String getTabs(int val) {
        String tabs = "";
        for (int i = 0; i < val; i++) {
            tabs += "    ";
        }
        return tabs;
    }

    void saveFile(String fileName) {
        try {
            Writer output = new BufferedWriter(new FileWriter(fileName));
            //writing the UseCase objects first
            for (int i = 0; i < useCaseObjects.size(); i++) {
                UseCaseObject obj = (UseCaseObject) useCaseObjects.get(i);
                if (obj.objectType.equals("A")) {
                    Actor act = (Actor) obj.obj;
                    output.write("A," + act.getX() + "," + act.getY() + "," + act.txt.getText() + "\n");
                } else {
                    UseCase uc = (UseCase) obj.obj;
                    output.write("U," + uc.getX() + "," + uc.getY() + "," + uc.txt.getText() + "\n");
                }
            }
            //writing usecase associations
            for (int i = 0; i < useCaseAssociations.size(); i++) {
                useCaseAssociation uca = (useCaseAssociation) useCaseAssociations.get(i);
                output.write("UCA," + uca.useCaseID1 + "," + uca.useCaseID2 + "\n");
            }
            //writing Model Classes
            for (int i = 0; i < classes.size(); i++) {
                ModelClass m = (ModelClass) classes.get(i);
                String vars = "";
                m.updateVariables();
                for (int j = 0; j < m.Variables.size(); j++) {
                    vars += m.Variables.get(j).toString() + ",";
                }
                if (vars.length() > 0) {
                    vars = vars.substring(0, vars.length() - 1);
                }
                output.write("MC," + m.getX() + "," + m.getY() + "," + m.ClassName + "," + vars + "\n");
            }
            //writing class association
            for (int i = 0; i < classAssVector.size(); i++) {
                association1 ass = (association1) classAssVector.get(i);
                output.write("CA," + ass.ass_classID1 + "," + ass.ass_classID2 + "\n");
            }
            //writing class aggregation
            for (int i = 0; i < classAggregation.size(); i++) {
                aggregation agg = (aggregation) classAggregation.get(i);
                output.write("CAG," + agg.agg_classID1 + "," + agg.agg_classID2 + "\n");
            }
            //writing class inheritance
            for (int i = 0; i < classAssociations.size(); i++) {
                association inh = (association) classAssociations.get(i);
                output.write("CI," + inh.classID1 + "," + inh.classID2 + "\n");
            }
            output.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    void readFile(String fileName) {
        try {
            String line = "";
            BufferedReader input = new BufferedReader(new FileReader(fileName));
            while ((line = input.readLine()) != null) {
                if (!line.trim().equals("")) {
                    StringTokenizer toks = new StringTokenizer(line, ",");
                    Vector tokens = new Vector();
                    while (toks.hasMoreTokens()) {
                        tokens.add(toks.nextToken());
                    }
                    if (tokens.get(0).equals("A")) { //An Actor found
                        Actor act = new Actor();
                        int x = Integer.parseInt(tokens.get(1).toString());
                        int y = Integer.parseInt(tokens.get(2).toString());
                        act.setBounds(x, y, 63, 146);
                        act.txt.setText(tokens.get(3).toString());
                        act.setVisible(true);
                        pnlCanvas.add(act);
                        act.id = useCaseObjects.size();
                        associateActor(act);
                        //adding it to the Object list
                        UseCaseObject obj = new UseCaseObject("A", act);
                        useCaseObjects.add(obj);
                    } else if (tokens.get(0).equals("U")) {
                        UseCase u = new UseCase();
                        int x = Integer.parseInt(tokens.get(1).toString());
                        int y = Integer.parseInt(tokens.get(2).toString());
                        u.setBounds(x, y, 276, 72);
                        pnlCanvas.add(u);
                        drawAssociations();
                        u.setVisible(true);
                        u.id = useCaseObjects.size();
                        u.txt.setText(tokens.get(3).toString());
                        associateUseCase(u);
                        UseCaseObject uco = new UseCaseObject("U", u);
                        useCaseObjects.add(uco);
                    } else if (tokens.get(0).equals("UCA")) {
                        useCaseAssociation uca = new useCaseAssociation();
                        uca.useCaseID1 = Integer.parseInt(tokens.get(1).toString());
                        uca.useCaseID2 = Integer.parseInt(tokens.get(2).toString());
                        useCaseAssociations.add(uca);
                    } else if (tokens.get(0).equals("MC")) {
                        ModelClass m = new ModelClass(tokens.get(3).toString());
                        pnlCanvas.add(m);
                        int x = Integer.parseInt(tokens.get(1).toString());
                        int y = Integer.parseInt(tokens.get(2).toString());
                        m.setBounds(x, y, 150, 100);
                        m.setVisible(true);
                        for (int i = 4; i < tokens.size(); i++) {
                            m.Variables.add(tokens.get(i).toString());
                        }
                        m.id = classes.size();
                        associateModelClass(m);
                        m.initialize();
                        classes.add(m);
                    } else if (tokens.get(0).equals("CI")) {
                        association inh = new association();
                        inh.classID1 = Integer.parseInt(tokens.get(1).toString());
                        inh.classID2 = Integer.parseInt(tokens.get(2).toString());
                        classAssociations.add(inh);
                    } else if (tokens.get(0).equals("CA")) {
                        association1 ca = new association1();
                        ca.ass_classID1 = Integer.parseInt(tokens.get(1).toString());
                        ca.ass_classID2 = Integer.parseInt(tokens.get(2).toString());
                        classAssVector.add(ca);
                    } else if (tokens.get(0).equals("CAG")) {
                        aggregation cag = new aggregation();
                        cag.agg_classID1 = Integer.parseInt(tokens.get(1).toString());
                        cag.agg_classID2 = Integer.parseInt(tokens.get(2).toString());
                        classAggregation.add(cag);
                    }

                }
                cmbInh.removeAll();
                cmbAss.removeAll();
                cmbAgg.removeAll();
                for (int i = 0; i < classAssociations.size(); i++) {
                    cmbInh.add("" + i);
                    i2 = i + 1;
                }
                for (int i = 0; i < classAssVector.size(); i++) {
                    cmbAss.add("" + i);
                    i1 = i + 1;
                }
                for (int i = 0; i < classAggregation.size(); i++) {
                    cmbAgg.add("" + i);
                    i3 = i + 1;
                }
                drawAssociations();
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public class painter extends Thread {

        @Override
        public void run() {
            while (true) {
                drawAssociations();
            }
        }
    }

    public void drawAssociations() {

        pnlCanvas.repaint();
//                cmbAss.removeAll();
//                
//                for(int i=0;i<classAssociations.size();i++)
//                {
//                    cmbAss.add("" + i);
//                }
//                for(int j=0;j<classAssVector.size();j++)
//                { 
//                        cmbAss.add("" + j);        
//                }

    }

    void deactivateAll() {
        for (int i = 0; i < classes.size(); i++) {
            ModelClass m = (ModelClass) classes.get(i);
            m.updateVariables();
            m.deActivate();
        }
    }

    void saveUML() {
        for (int i = 0; i < classes.size(); i++) {
            ModelClass m = (ModelClass) classes.get(i);
            m.updateVariables();
            for (int j = 0; j < m.Variables.size(); j++) {
                System.out.println(m.Variables.get(j).toString());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUML("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar Aggregation;
    private javax.swing.JToolBar Association;
    private javax.swing.JToolBar Inheritance;
    private javax.swing.JToolBar Save;
    private java.awt.Choice cmbAgg;
    private java.awt.Choice cmbAss;
    private java.awt.Choice cmbInh;
    private javax.swing.JButton cmdActor;
    private javax.swing.JButton cmdAddClass;
    private javax.swing.JToggleButton cmdAggregation;
    private javax.swing.JToggleButton cmdAssociation;
    private javax.swing.JButton cmdDelAgg;
    private javax.swing.JButton cmdDelAss;
    private javax.swing.JButton cmdDelInh;
    private javax.swing.JToggleButton cmdExtends;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JToggleButton cmdInheritance;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdUseCase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables
    public class myJPanel extends JPanel {

        private PointyThing pointyThing;
        private PointyThing2 pointyThing2;

        public myJPanel() {
            pointyThing = new PointyThing();
            pointyThing2 = new PointyThing2();
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);

            //creating class inheritance
            for (int i = 0; i < classAssociations.size(); i++) {
                lines.clear();

                Graphics2D g2d = (Graphics2D) g.create();
                Graphics2D g2d_arrow = (Graphics2D) g.create();

                association a = (association) classAssociations.get(i);
                ModelClass m1 = (ModelClass) classes.get(a.classID1);
                ModelClass m2 = (ModelClass) classes.get(a.classID2);
                int x1 = m1.getX() + (m1.getWidth() / 2);
                int x2 = m2.getX() + (m2.getWidth() / 2);

                int y1 = m1.getY() + (m1.getHeight() / 2);
                int y2 = m2.getY() + (m2.getHeight() / 2);
                if (x1 > x2) {
                    x1 = m1.getX();
                    x2 = m2.getX() + m2.getWidth();
                    g2d.drawString(i + "", x1 - 10, y1);

                } else {
                    x1 = m1.getX() + m2.getWidth();
                    x2 = m2.getX();
                    g2d.drawString(i + "", x1 + 10, y1);

                }
//                    g.setColor(Color.BLACK);
//                    g.drawLine(x1,y1,x2,y2);                    
//                    Line2D l=new Line2D.Double(x1,y1,x2,y2);

                double rotation = 0f;

                double dx = x2 - x1;
                double dy = y2 - y1;
                rotation = -Math.atan2(dx, dy);
                rotation = Math.toDegrees(rotation) + 180;

                Rectangle bounds = pointyThing.getBounds();
                g2d.setStroke(new BasicStroke(1));
                g2d.setColor(Color.BLACK);
                g2d.draw(new Line2D.Float(x1, y1, x2, y2));

                AffineTransform at = new AffineTransform();
                at.translate(x2 - (bounds.width / 2), y2 - (bounds.height / 2));
                at.rotate(Math.toRadians(rotation), bounds.width / 2, bounds.height / 2);
                Shape shape = new Path2D.Float(pointyThing, at);

                g2d_arrow.setStroke(new BasicStroke(1));
                g2d_arrow.setColor(Color.BLACK);
                g2d_arrow.draw(shape);
                g2d.dispose();

                lines.add(g2d);
            }

            // creating class aggregation
            for (int i = 0; i < classAggregation.size(); i++) {
                lines.clear();
                Graphics2D g2d = (Graphics2D) g.create();
                Graphics2D g2d_arrow = (Graphics2D) g.create();

                aggregation a = (aggregation) classAggregation.get(i);
                ModelClass m1 = (ModelClass) classes.get(a.agg_classID1);
                ModelClass m2 = (ModelClass) classes.get(a.agg_classID2);
                int x1 = m1.getX() + (m1.getWidth() / 2);
                int x2 = m2.getX() + (m2.getWidth() / 2);

                int y1 = m1.getY() + (m1.getHeight() / 2);
                int y2 = m2.getY() + (m2.getHeight() / 2);
                if (x1 > x2) {
                    x1 = m1.getX();
                    x2 = m2.getX() + m2.getWidth();
                    g2d.drawString(i + "", x1 - 10, y1);

                } else {
                    x1 = m1.getX() + m2.getWidth();
                    x2 = m2.getX();
                    g2d.drawString(i + "", x1 + 10, y1);

                }

                double rotation = 0f;

                double dx = x2 - x1;
                double dy = y2 - y1;
                rotation = -Math.atan2(dx, dy);
                rotation = Math.toDegrees(rotation) + 180;

                Rectangle bounds = pointyThing2.getBounds();
                g2d.setStroke(new BasicStroke(1));
                g2d.setColor(Color.BLACK);
                g2d.draw(new Line2D.Float(x1, y1, x2, y2));

                AffineTransform at = new AffineTransform();
                at.translate(x2 - (bounds.width / 2), y2 - (bounds.height / 2));
                at.rotate(Math.toRadians(rotation), bounds.width / 2, bounds.height / 2);
                Shape shape = new Path2D.Float(pointyThing2, at);

                g2d_arrow.setStroke(new BasicStroke(1));
                g2d_arrow.setColor(Color.BLACK);
                g2d_arrow.draw(shape);
                g2d.dispose();

                lines.add(g2d);

            }

            // creating class associations
            for (int i = 0; i < classAssVector.size(); i++) {
                lines.clear();
                association1 a = (association1) classAssVector.get(i);
                ModelClass m1 = (ModelClass) classes.get(a.ass_classID1);
                ModelClass m2 = (ModelClass) classes.get(a.ass_classID2);
                int x1 = m1.getX() + (m1.getWidth() / 2);
                int x2 = m2.getX() + (m2.getWidth() / 2);

                int y1 = m1.getY() + (m1.getHeight() / 2);
                int y2 = m2.getY() + (m2.getHeight() / 2);
                if (x1 > x2) {
                    x1 = m1.getX();
                    x2 = m2.getX() + m2.getWidth();
                    g.drawString(i + "", x1 - 10, y1);

                } else {
                    x1 = m1.getX() + m2.getWidth();
                    x2 = m2.getX();
                    g.drawString(i + "", x1 + 10, y1);

                }
                g.setColor(Color.BLACK);
                g.drawLine(x1, y1, x2, y2);
                Line2D l = new Line2D.Double(x1, y1, x2, y2);

                lines.add(l);

            }

            //drawing usecase associations
            for (int i = 0; i < useCaseAssociations.size(); i++) {
                lines.clear();
                useCaseAssociation a = (useCaseAssociation) useCaseAssociations.get(i);

                UseCaseObject m1 = (UseCaseObject) useCaseObjects.get(a.useCaseID1);
                UseCaseObject m2 = (UseCaseObject) useCaseObjects.get(a.useCaseID2);

                int x1 = 0, x2 = 0, y1 = 0, y2 = 0;

                //fetching x1 and y1
                if (m1.objectType.equals("A")) {
                    Actor act = (Actor) m1.obj;
                    x1 = act.getX() + (act.getWidth() / 2);
                    y1 = act.getY() + (act.getHeight() / 2);
                } else {
                    UseCase uc = (UseCase) m1.obj;
                    x1 = uc.getX() + (uc.getWidth() / 2);
                    y1 = uc.getY() + (uc.getHeight() / 2);
                }

                //fetching x2 and y2
                if (m2.objectType.equals("A")) {
                    Actor act = (Actor) m2.obj;
                    x2 = act.getX() + (act.getWidth() / 2);
                    y2 = act.getY() + (act.getHeight() / 2);
                } else {
                    UseCase uc = (UseCase) m2.obj;
                    x2 = uc.getX() + (uc.getWidth() / 2);
                    y2 = uc.getY() + (uc.getHeight() / 2);
                }

                //adjusting the line
                if (x1 > x2) {
                    if (m1.objectType.equals("A")) {
                        Actor act = (Actor) m1.obj;
                        x1 = act.getX();
                    } else {
                        UseCase uc = (UseCase) m1.obj;
                        x1 = uc.getX();
                    }
                    if (m2.objectType.equals("A")) {
                        Actor act = (Actor) m2.obj;
                        x2 = act.getX() + act.getWidth();
                    } else {
                        UseCase uc = (UseCase) m2.obj;
                        x2 = uc.getX() + uc.getWidth();
                    }
                    g.drawString(i + "", x1 - 10, y1);

                } else {
                    if (m1.objectType.equals("A")) {
                        Actor act = (Actor) m1.obj;
                        x1 = act.getX() + act.getWidth();
                    } else {
                        UseCase uc = (UseCase) m1.obj;
                        x1 = uc.getX() + uc.getWidth();
                    }
                    if (m2.objectType.equals("A")) {
                        Actor act = (Actor) m2.obj;
                        x2 = act.getX();
                    } else {
                        UseCase uc = (UseCase) m2.obj;
                        x2 = uc.getX();
                    }
                    g.drawString(i + "", x1 - 10, y1);

                }
                g.setColor(Color.BLACK);
                g.drawLine(x1, y1, x2, y2);
                Line2D l = new Line2D.Double(x1, y1, x2, y2);

                lines.add(l);
            }
            
            // creating use case Extends
            for (int i = 0; i < useCaseExtend.size(); i++) {
                lines.clear();
                Graphics2D g2d = (Graphics2D) g.create();
                Graphics2D g2d_arrow = (Graphics2D) g.create();
                
                useCaseExtends a = (useCaseExtends) useCaseExtend.get(i);

                UseCaseObject m1 = (UseCaseObject) useCaseObjects.get(a.extendsID1);
                UseCaseObject m2 = (UseCaseObject) useCaseObjects.get(a.extendsID2);

                int x1 = 0, x2 = 0, y1 = 0, y2 = 0;

                //fetching x1 and y1
                if (m1.objectType.equals("A")) {
                    Actor act = (Actor) m1.obj;
                    x1 = act.getX() + (act.getWidth() / 2);
                    y1 = act.getY() + (act.getHeight() / 2);
                } else {
                    UseCase uc = (UseCase) m1.obj;
                    x1 = uc.getX() + (uc.getWidth() / 2);
                    y1 = uc.getY() + (uc.getHeight() / 2);
                }

                //fetching x2 and y2
                if (m2.objectType.equals("A")) {
                    Actor act = (Actor) m2.obj;
                    x2 = act.getX() + (act.getWidth() / 2);
                    y2 = act.getY() + (act.getHeight() / 2);
                } else {
                    UseCase uc = (UseCase) m2.obj;
                    x2 = uc.getX() + (uc.getWidth() / 2);
                    y2 = uc.getY() + (uc.getHeight() / 2);
                }

                //adjusting the line
                if (x1 > x2) {
                    if (m1.objectType.equals("A")) {
                        Actor act = (Actor) m1.obj;
                        x1 = act.getX();
                    } else {
                        UseCase uc = (UseCase) m1.obj;
                        x1 = uc.getX();
                    }
                    if (m2.objectType.equals("A")) {
                        Actor act = (Actor) m2.obj;
                        x2 = act.getX() + act.getWidth();
                    } else {
                        UseCase uc = (UseCase) m2.obj;
                        x2 = uc.getX() + uc.getWidth();
                    }
                    g.drawString(i + "", x1 - 10, y1);

                } else {
                    if (m1.objectType.equals("A")) {
                        Actor act = (Actor) m1.obj;
                        x1 = act.getX() + act.getWidth();
                    } else {
                        UseCase uc = (UseCase) m1.obj;
                        x1 = uc.getX() + uc.getWidth();
                    }
                    if (m2.objectType.equals("A")) {
                        Actor act = (Actor) m2.obj;
                        x2 = act.getX();
                    } else {
                        UseCase uc = (UseCase) m2.obj;
                        x2 = uc.getX();
                    }
                    g2d.drawString(i + "", x1 - 10, y1);

                }
                
        
        double rotation = 0f;

        
        double dx = x2 - x1;
        double dy = y2 - y1;
        rotation = -Math.atan2(dx, dy);
        rotation = Math.toDegrees(rotation) + 180;
        
        Rectangle bounds = pointyThing.getBounds();
        g2d.setStroke(new BasicStroke(1,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL,0,new float[]{9},0));
        g2d.setColor(Color.BLACK);
        g2d.draw(new Line2D.Float(x1, y1, x2, y2));

        AffineTransform at = new AffineTransform();
        at.translate(x2 - (bounds.width / 2), y2 - (bounds.height / 2));
        at.rotate(Math.toRadians(rotation), bounds.width / 2, bounds.height / 2);
        Shape shape = new Path2D.Float(pointyThing, at);
        
        g2d_arrow.setStroke(new BasicStroke(1));
        g2d_arrow.fill(shape);
        g2d_arrow.setColor(Color.BLACK);
        g2d_arrow.draw(shape);
        g2d.dispose();
                

                lines.add(g2d);
            }

        }
    }

    private class PointyThing extends Path2D.Float {

        public PointyThing() {
            moveTo(10, 0);
            lineTo(20, 10);
            lineTo(0, 10);
            lineTo(10, 0);

        }

    }

    private class PointyThing2 extends Path2D.Float {

        public PointyThing2() {
            moveTo(10, 0);
            lineTo(20, 10);
            lineTo(10, 20);
            lineTo(0, 10);
            lineTo(10, 0);

        }

    }
}
